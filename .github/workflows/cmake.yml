name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-ubuntu:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Install SDL2 packages
      run: sudo apt -y install libsdl2-dev libsdl2-image-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Package into deb package
      run: cd build; cpack -G DEB

    - name: Extract artifact
      uses: actions/upload-artifact@v2
      with:
        path: build/osu*.deb

  build-windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install MinGW64 and dependencies
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: mingw-w64-x86_64-toolchain mingw-w64-x86_64-SDL2 mingw-w64-x86_64-SDL2_image

    - name: Install CMake and ninja
      run: choco install cmake ninja
    
    - name: CMake build makefile
      run: mkdir build; cd build; cmake .. -G "MinGW Makefiles"

    - name: Build
      run: mingw32-make