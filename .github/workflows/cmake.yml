# name: CMake

# on:
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]

# env:
#   # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
#   BUILD_TYPE: Release

# jobs:
#   build-ubuntu:
#     # The CMake configure and build commands are platform agnostic and should work equally
#     # well on Windows or Mac.  You can convert this to a matrix build if you need
#     # cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         submodules: 'recursive'
    
#     - name: Install SFML packages
#       run: sudo apt -y install libsfml-dev

#     - name: Configure CMake
#       run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

#     - name: Build
#       # Build your program with the given configuration
#       run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

#     - name: Package into deb package
#       run: cd build; cpack -G DEB; mv osu*.deb osupp.deb

#     - name: Extract artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: osupp.deb
#         path: build/osupp.deb

#   # build-windows:
#   #   runs-on: windows-latest

#   #   steps:
#   #   - uses: actions/checkout@v2

#   #   - name: Install MinGW64 and SDL2
#   #     run: C:\msys64\usr\bin\bash.exe -lc "pacman --noconfirm -S mingw64/mingw-w64-x86_64-SDL2 mingw64/mingw-w64-x86_64-SDL2_image"

#   #   - name: Install CMake and ninja
#   #     run: choco install cmake ninja
    
#   #   - name: CMake build makefile
#   #     run: mkdir build; cd build; cmake .. -G "MinGW Makefiles"

#   #   - name: Build
#   #     run: mingw32-make